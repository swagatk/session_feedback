name: Deploy to GitHub Pages

# Run this workflow every time you push to the `main` branch
on:
  push:
    branches: [ main ]

# Set permissions for the GITHUB_TOKEN for deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Check for Firebase secrets
        run: |
          echo "üîç Checking for Firebase configuration secrets..."
          echo "Current repository: ${{ github.repository }}"
          echo "Current branch: ${{ github.ref }}"
          
          # List some common secret patterns that might exist
          echo "üìù You need to set up the following secrets in your GitHub repository:"
          echo "   Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "   Add these secrets:"
          echo "   - FIREBASE_API_KEY"
          echo "   - FIREBASE_AUTH_DOMAIN" 
          echo "   - FIREBASE_PROJECT_ID"
          echo "   - FIREBASE_STORAGE_BUCKET"
          echo "   - FIREBASE_MESSAGING_SENDER_ID"
          echo "   - FIREBASE_APP_ID"
          echo ""
          echo "‚ö†Ô∏è  Without these secrets, the Firebase configuration cannot be set up!"
          echo "‚ö†Ô∏è  The app will show 'Config Missing' error until secrets are configured."
          
      - name: Replace Firebase config placeholders (will fail without secrets)
        run: |
          # Show file before replacement
          echo "üìÑ File content before replacement:"
          grep -n "YOUR_.*_HERE" index.html || echo "No placeholders found"
          
          # Check if required secrets exist (this will show in logs if they're set)
          echo "üîê Checking secret availability..."
          if [ -n "${{ secrets.FIREBASE_API_KEY }}" ]; then
            echo "‚úÖ FIREBASE_API_KEY is set"
          else
            echo "‚ùå FIREBASE_API_KEY is NOT set"
          fi
          
          if [ -n "${{ secrets.FIREBASE_AUTH_DOMAIN }}" ]; then
            echo "‚úÖ FIREBASE_AUTH_DOMAIN is set"
          else
            echo "‚ùå FIREBASE_AUTH_DOMAIN is NOT set"
          fi
          
          if [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "‚úÖ FIREBASE_PROJECT_ID is set"
          else
            echo "‚ùå FIREBASE_PROJECT_ID is NOT set"
          fi
          
          # Proceed with replacement (even if secrets are empty - this will help debug)
          echo "üîÑ Attempting replacements..."
          
          sed "s#YOUR_API_KEY_HERE#${{ secrets.FIREBASE_API_KEY }}#g" index.html > temp1.html && mv temp1.html index.html
          sed "s#YOUR_AUTH_DOMAIN_HERE#${{ secrets.FIREBASE_AUTH_DOMAIN }}#g" index.html > temp2.html && mv temp2.html index.html
          sed "s#YOUR_PROJECT_ID_HERE#${{ secrets.FIREBASE_PROJECT_ID }}#g" index.html > temp3.html && mv temp3.html index.html
          sed "s#YOUR_STORAGE_BUCKET_HERE#${{ secrets.FIREBASE_STORAGE_BUCKET }}#g" index.html > temp4.html && mv temp4.html index.html
          sed "s#YOUR_MESSAGING_SENDER_ID_HERE#${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}#g" index.html > temp5.html && mv temp5.html index.html
          sed "s#YOUR_APP_ID_HERE#${{ secrets.FIREBASE_APP_ID }}#g" index.html > temp6.html && mv temp6.html index.html
          
          # Show file after replacement
          echo "üìÑ File content after replacement:"
          grep -n "YOUR_.*_HERE" index.html || echo "All placeholders replaced (check if with actual values or empty)"
          
          # Show a sample of the Firebase config section (safely)
          echo "üîç Firebase config section preview:"
          grep -A 8 "const firebaseConfig" index.html | head -10
      
      - name: Verify replacement
        run: |
          echo "Verifying file content..."
          echo "Checking for remaining placeholders:"
          grep -n "YOUR_.*_HERE" index.html || echo "No placeholders found - replacement successful!"
          echo "Checking for Firebase config section:"
          grep -A 10 -B 2 "apiKey:" index.html || echo "Firebase config section not found"
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the modified index.html
          path: '.'

  deploy:
    # This job needs the build job to finish first
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

